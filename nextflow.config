manifest {
    author = 'Phelelani Mpangase'
    description = 'rnaSeqMetagen pipeline'
    mainScript = 'main.nf'
}

// Check if the output directory has been given, if not, place them in the current working directory.
def checkOutPath(String script, String mode = null) {
    switch( script ) {
        case ['main']:
            if(params.out == null) {
                out_path = "$baseDir/results_nf-rnaSeqMetagen"
            } else{
                out_path = params.out
            }
            break
        case ['prepare']:
            switch ( mode ) {
                case ['getContainers']:
                    out_path = "$baseDir/containers"
                    break
                case ['generateStarIndex']:
                    out_path = new File(params.genome).getParent()
                    break
                case ['generateBowtieIndex']:
                    out_path = new File(params.genome).getParent()
                    break
                case ['generateKrakenDB']:
                    out_path = params.kraken_dir
                    break
            }
    }
}

// Paths to bind
def checkBindPaths() {
    if(params.bind) {
        if(params.bind == null) {
            bind_paths = "$HOME"
            bind_paths = bind_paths + " --bind ${out_path}:${out_path}"
        } else if(!params.bind == null){
            bind = params.bind.split(';')
            bind_paths = bind.collect { entry ->  "--bind $entry:$entry" } .join(' ')
            bind_paths = bind_paths + " --bind ${out_path}:${out_path}"
        } else{
            bind_paths = " --bind ${out_path}:${out_path}"
        }
    } else {
        bind_paths = " --bind ${out_path}:${out_path}"
    }
    return bind_paths
}

// Pipeline tracing, visualization and help
def pipelineHelp() {
    if(params.help) {}
    else{
        trace {
            enabled = true
            file = "${out_path}/report_workflow/nf-rnaSeqMetagen_trace.txt"
        }
        timeline {
            enabled = true
            file = "${out_path}/report_workflow/nf-rnaSeqMetagen_timeline.html"
        }
        report {
            enabled = true
            file = "${out_path}/report_workflow/nf-rnaSeqMetagen_report.html"
        }
        dag {
            enabled = true
            file = "${out_path}/report_workflow/nf-rnaSeqMetagen.dot"
        }
    }
}

// Standard process options
def stdProcess() {
    process {
        cache = true
        executor = 'local'
        stageInMode = 'symlink'
        stageOutMode = 'rsync'
    }
}

// Cluster (PBS) process options
def pbsProcess() {
    process {
        cache = true
        executor = 'pbs'
        queue = 'batch'
        stageInMode = 'symlink'
        stageOutMode = 'rsync'
    }
}

// Singularity options
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$baseDir/containers"
        runOptions = "$bind_paths" + " --cleanenv"
        autoMounts = true
    }
}

// Containers for the main pipeline
def pipelineContainers() {
    process {
        withName:runSTAR_process {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-star.simg"
        }
        withName:runKrakenClassifyReads_process {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-kraken.simg"
        }
        withName:runKrakenClassifyFasta_process {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-kraken.simg"
        }
        withName:runTrinityAssemble_process {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-trinity.simg"
        }
        withName:runKronareport {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-kraken.simg"
        }
        withName:runMultiQC_process {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-multiqc.simg"
        }
    }
}

// Containers for preparing data
def prepareContainers() {
    process {
        withName:generateSTARIndex {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-star.simg"
        }
        withName:generateBowtie2Index {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-trinity.simg"
        }
        withName:generateKrakenDB {
            container = "$baseDir/containers/phelelani-nf-rnaSeqMetagen-master-kraken.simg"
        }
    }
}

// PROFILES AND PROCESS OPTIONS
profiles {
    // MAIN PIPELINE PROFILES
    standard {
        includeConfig "$baseDir/parameters_main.config"
        checkOutPath('main')
        checkBindPaths()
        stdProcess()
        pipelineContainers()
        singularityOptions()
        pipelineHelp()
    }
    pbs {
        includeConfig "$baseDir/parameters_main.config"
        checkOutPath('main')
        checkBindPaths()
        pbsProcess()
        pipelineContainers()
        singularityOptions()
        pipelineHelp()
    }
    // DATA PREPARETION PROFILES
    prepare {
        includeConfig "$baseDir/parameters_prepare.config"
        checkOutPath('prepare')
        checkBindPaths()
        stdProcess()
        prepareContainers()
        singularityOptions()
    }
    pbsPrepare {
        includeConfig "$baseDir/parameters_prepare.config"
        checkOutPath('prepare', params.mode)
        checkBindPaths()
        pbsProcess()
        prepareContainers()
        singularityOptions()
    }
}
