// Configuration File
manifest {
    author = 'Phelelani Mpangase'
    homePage = 'https://github.com/phelelani/nf-rnaSeqMetagen'
    description = 'rnaSeqMetagen pipeline'
    mainScript = 'main.nf'
    version = '0.2'
}

// CHECK INPUTS AND OUTPUTS:
params {
    data       = null
    out        = null
    db         = null
    genome     = "/global/blast/reference_genomes/Mycobacterium_Tuberculosis_H37RV/genome.fasta"
    genes      = "/global/blast/reference_genomes/Mycobacterium_Tuberculosis_H37RV/genes.gtf"
    help       = null
    mode       = null
    pairedEnd  = null
    singleEnd  = null
    
    // RESOURCES
    max_memory = 200.GB
    max_cpus   = 24
    max_time   = 24.h
}

//  FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


// CHECK INPUT AND OUTPUT PATHS
def checkPaths() {
    // CHECK DATA INPUT DIR
    if(params.data == null) {
        data_dir = new File("$PWD/")
    } else{
        data_dir = new File("${params.data}")
    }
    // CHECK DATA OUTPUT DIR
    if(params.out == null) {
        out_dir = new File("$PWD/results_nf-rnaSeqMetagen")
    } else{
        out_dir = new File("${params.out}")
    }
    // CHECK KRAKEN2_DB
    if(params.db== null) {
        db = new File("${PWD}/kraken2db")
    } else{
        db = new File("${params.db}")
    }
    // BIND GENOME AND GENES DIR
    genome_dir = new File("${params.genome}").getParent()
    genes_dir = new File("${params.genes}").getParent()
    bind_paths  = [data_dir, out_dir, db, genome_dir, genes_dir].unique().collect { it -> "-B ${it}"}.join(" ").toString()
    return [ bind_paths, out_dir ]
}

// SINGULARITY OPTIONS
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$PWD/containers"
        runOptions = "$bind_paths" + " --cleanenv"
        autoMounts = true
    }
}

// PIPELINE TRACING, VISUALIZATION AND HELP
def pipelineHelp() {
    if(params.help || params.mode == null) {
    } else if(params.mode == 'run.FilterClassify') {
        trace {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqMetagen_${params.mode}_trace.txt"
        }
        timeline {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqMetagen_${params.mode}_timeline.html"
        }
        report {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqMetagen_${params.mode}_report.html"
        }
        dag {
            enabled = true
            file = "${out_dir}/workflow-tracing/nf-rnaSeqMetagen.dot"
        }
    } else{}
}

// ALL PROCESSESS SETTINGS
process {
    // ALL PROCESSES
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'

    // SPECIAL RESOURCE REQUIREMENTS
    withLabel: 'mini' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }   
    withLabel: 'midi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }        
    }   
    withLabel: 'maxi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }

    // CONTAINERS
    withName:run_GenerateSTARIndex {
        container = "$PWD/containers/nf-rnaSeqMetagen-star.sif"
    }
    withName:run_GenerateBowtieIndex {
        container = "$PWD/containers/nf-rnaSeqMetagen-trinity.sif"
    }
    withName:run_GenerateKrakenDB {
        container = "$PWD/containers/nf-rnaSeqMetagen-kraken2.sif"
    }
    withName:run_STAR {
        container = "$PWD/containers/nf-rnaSeqMetagen-star.sif"
    }
    withName:run_KrakenClassifyReads {
        container = "$PWD/containers/nf-rnaSeqMetagen-kraken2.sif"
    }
    withName:run_KrakenClassifyFasta {
        container = "$PWD/containers/nf-rnaSeqMetagen-kraken2.sif"
    }
    withName:run_TrinityAssemble {
        container = "$PWD/containers/nf-rnaSeqMetagen-trinity.sif"
    }
    withName:run_KronaReport {
        container = "$PWD/containers/nf-rnaSeqMetagen-kraken2.sif"
    }
    withName:run_MultiQC {
        container = "$PWD/containers/nf-rnaSeqMetagen-multiqc.sif"
    }
    withName:run_PrepareMatrixData {
        container = "$PWD/containers/nf-rnaSeqMetagen-upset.sif"
    }
    withName:run_CreateMatrix {
        container = "$PWD/containers/nf-rnaSeqMetagen-upset.sif"
    }
}


// PROFILES AND PROCESS OPTIONS
profiles {
    standard {
        executor = 'local'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
    slurm {
        executor = 'slurm'
        queue = 'batch'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
}

// # }
// # //
// # cloud {
// #     imageId = "ami-4b7daa32"
// #     instanceType = "m4.10xlarge"
// #     sharedStorageId   = "null"
// #     sharedStorageMount = "/mnt/shared"
// #     subnetId = "subnet-b720b2c1"
// #     bootStorageSize = "1000GB"
// #     autoscale {
// #         enabled = true
// #         maxInstances = 1
// #         maxInstances = 6
// #         terminateWhenIdle = true
// #     }
// # }

// # // Check if the output directory has been given, if not, place them in the current working directory.
// # def checkOutPath(String script, String mode = null) {
// #     switch( script ) {
// #         case ['main']:
// #             if(params.out == null) {
// #                 out_path = "$baseDir/results_nf-rnaSeqMetagen"
// #             } else{
// #                 out_path = params.out
// #             }
// #             break
// #         case ['prepare']:
// #             switch ( mode ) {
// #                 case ['getContainers']:
// #                     out_path = "$baseDir/containers"
// #                     break
// #                 case ['generateStarIndex']:
// #                     out_path = new File(params.genome).getParent()
// #                     break
// #                 case ['generateBowtieIndex']:
// #                     out_path = new File(params.genome).getParent()
// #                     break
// #                 case ['generateKrakenDB']:
// #                     out_path = params.kraken_dir
// #                     break
// #             }
// #     }
// # }

// # // Paths to bind
// # def checkBindPaths() {
// #     if(params.bind == null) {
// #         bind_paths = "--bind ${out_path}:${out_path}"
// #     } else{
// #         bind = params.bind.split(';')
// #         bind_paths = bind.collect { entry ->  "--bind $entry:$entry" } .join(' ')
// #         bind_paths = bind_paths + " --bind ${out_path}:${out_path}"
// #     }
// #     return bind_paths
// # }

// # // Pipeline tracing, visualization and help
// # def pipelineHelp() {
// #     if(params.help) {}
// #     else{
// #         trace {
// #             enabled = true
// #             file = "${out_path}/report_workflow/nf-rnaSeqMetagen_trace.txt"
// #         }
// #         timeline {
// #             enabled = true
// #             file = "${out_path}/report_workflow/nf-rnaSeqMetagen_timeline.html"
// #         }
// #         report {
// #             enabled = true
// #             file = "${out_path}/report_workflow/nf-rnaSeqMetagen_report.html"
// #         }
// #         dag {
// #             enabled = true
// #             file = "${out_path}/report_workflow/nf-rnaSeqMetagen.dot"
// #         }
// #     }
// # }

// # // Standard process options
// # def stdProcess() {
// #     process {
// #         cache = true
// #         executor = 'local'
// #         stageInMode = 'symlink'
// #         stageOutMode = 'rsync'
// #     }
// # }

// # // Cluster (PBS) process options
// # def pbsProcess() {
// #     process {
// #         cache = true
// #         executor = 'pbs'
// #         queue = 'batch'
// #         stageInMode = 'symlink'
// #         stageOutMode = 'rsync'
// #     }
// # }

// # // Cluster (SLURM) process options
// # def slurmProcess() {
// #     process {
// #         cache = true
// #         executor = 'slurm'
// #         queue = 'batch'
// #         stageInMode = 'symlink'
// #         stageOutMode = 'rsync'
// #         clusterOptions = '--exclude=n16'
// #     }
// # }

// # // HPC Cluster (SLURM) process options
// # def slurmUCTProcess() {
// #     process {
// #         cache = true
// #         executor = 'slurm'
// #         queue = 'ada'
// #         stageInMode = 'symlink'
// #         stageOutMode = 'rsync'
// #     }
// # }

// # // Singularity options
// # def singularityOptions() {
// #     singularity {
// #         enabled = true
// #         cacheDir = "$baseDir/containers"
// #         runOptions = "$bind_paths" + " --cleanenv"
// #         autoMounts = true
// #     }
// # }


// # // PROFILES AND PROCESS OPTIONS
// # profiles {
// #     // MAIN PIPELINE PROFILES
// #     standard {
// #         includeConfig "$baseDir/main.config"
// #         checkOutPath('main')
// #         checkBindPaths()
// #         stdProcess()
// #         pipelineContainers()
// #         singularityOptions()
// #         pipelineHelp()
// #     }
// #     pbs {
// #         includeConfig "$baseDir/main.config"
// #         checkOutPath('main')
// #         checkBindPaths()
// #         pbsProcess()
// #         pipelineContainers()
// #         singularityOptions()
// #         pipelineHelp()
// #     }
// #     slurm {
// #         includeConfig "$baseDir/main.config"
// #         checkOutPath('main')
// #         checkBindPaths()
// #         slurmProcess()
// #         pipelineContainers()
// #         singularityOptions()
// #         pipelineHelp()
// #     }
// #     slurmUCT {
// #         includeConfig "$baseDir/main.config"
// #         checkOutPath('main')
// #         checkBindPaths()
// #         slurmUCTProcess()
// #         pipelineContainers()
// #         singularityOptions()
// #         pipelineHelp()
// #     }
    
// #     // DATA PREPARETION PROFILES
// #     prepare {
// #         includeConfig "$baseDir/prepare_data.config"
// #         checkOutPath('prepare')
// #         checkBindPaths()
// #         stdProcess()
// #         prepareContainers()
// #         singularityOptions()
// #         // Prepare tracing
// #         trace {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_trace.txt"
// #         }
// #         timeline {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_timeline.html"
// #         }
// #         report {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_report.html"
// #         }
// #     }
// #     pbsPrepare {
// #         includeConfig "$baseDir/prepare_data.config"
// #         checkOutPath('prepare', params.mode)
// #         checkBindPaths()
// #         pbsProcess()
// #         prepareContainers()
// #         singularityOptions()
// #         // Prepare tracing
// #         trace {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_trace.txt"
// #         }
// #         timeline {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_timeline.html"
// #         }
// #         report {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_report.html"
// #         }
// #     }
// #     slurmPrepare {
// #         includeConfig "$baseDir/prepare_data.config"
// #         checkOutPath('prepare', params.mode)
// #         checkBindPaths()
// #         slurmProcess()
// #         prepareContainers()
// #         singularityOptions()
// #         // Prepare tracing
// #         trace {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_trace.txt"
// #         }
// #         timeline {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_timeline.html"
// #         }
// #         report {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_report.html"
// #         }
// #     }
// #     slurmUCTPrepare {
// #         includeConfig "$baseDir/prepare_data.config"
// #         checkOutPath('prepare', params.mode)
// #         checkBindPaths()
// #         slurmUCTProcess()
// #         prepareContainers()
// #         singularityOptions()
// #         // Prepare tracing
// #         trace {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_trace.txt"
// #         }
// #         timeline {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_timeline.html"
// #         }
// #         report {
// #             enabled = true
// #             file = "$baseDir/report_prepare/${params.mode}_report.html"
// #         }
// #     }
// # }
